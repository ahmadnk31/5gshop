generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String   @unique
  phone     String
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quotes    Quote[]
  repairs   Repair[]

  @@map("customers")
}

model Device {
  id           String    @id @default(cuid())
  type         String
  brand        String
  model        String
  serialNumber String?
  purchaseDate DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  description  String?
  imageUrl     String?
  quotes       Quote[]
  repairs      Repair[]

  @@map("devices")
}

model Part {
  id          String       @id @default(cuid())
  name        String
  sku         String       @unique
  cost        Float
  supplier    String
  inStock     Int
  minStock    Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  description String?
  imageUrl    String?
  deviceModel String?      // Compatible device model for exact matching
  deviceType  String?      // Compatible device type for broader matching
  quality     String?      // e.g. "OEM", "Original", "Premium", "Aftermarket", "Refurbished"
  repairParts RepairPart[]

  @@map("parts")
}

model Repair {
  id                  String       @id @default(cuid())
  customerId          String?
  deviceId            String
  issue               String
  description         String
  status              String       @default("PENDING")
  priority            String       @default("MEDIUM")
  cost                Float
  estimatedCompletion DateTime
  completedAt         DateTime?
  assignedTechnician  String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  repairNotes         RepairNote[]
  repairParts         RepairPart[]
  device              Device       @relation(fields: [deviceId], references: [id])
  customer            Customer?     @relation(fields: [customerId], references: [id])

  @@map("repairs")
}

model RepairPart {
  id       String @id @default(cuid())
  repairId String
  partId   String
  quantity Int
  part     Part   @relation(fields: [partId], references: [id])
  repair   Repair @relation(fields: [repairId], references: [id])

  @@unique([repairId, partId])
  @@map("repair_parts")
}

model RepairNote {
  id        String   @id @default(cuid())
  repairId  String
  note      String
  createdAt DateTime @default(now())
  repair    Repair   @relation(fields: [repairId], references: [id])

  @@map("repair_notes")
}

model Quote {
  id            String   @id @default(cuid())
  customerId    String?
  deviceId      String?
  issues        String
  description   String?
  estimatedCost Float?
  estimatedTime String?
  status        String   @default("PENDING")
  urgency       String   @default("MEDIUM")
  adminNotes    String?
  expiresAt     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  device        Device?  @relation(fields: [deviceId], references: [id])
  customer      Customer? @relation(fields: [customerId], references: [id])

  @@map("quotes")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  role          String   @default("user") // 'admin', 'retailer', 'user'
  hashedPassword String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orders        Order[]
  // Address fields
  firstName     String?
  lastName      String?
  address1      String?
  address2      String?
  city          String?
  state         String?
  postalCode    String?
  country       String?

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires   DateTime
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Accessory {
  id           String    @id @default(cuid())
  name         String
  category     String    // e.g., "CASE", "CHARGER", "CABLE", "HEADPHONES", "STAND", "SCREEN_PROTECTOR"
  brand        String
  model        String?
  price        Float
  inStock      Int
  minStock     Int
  description  String?
  imageUrl     String?
  compatibility String?   // Compatible device types or models
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("accessories")
}

model Contact {
  id           String    @id @default(cuid())
  firstName    String
  lastName     String
  email        String
  phone        String?
  serviceType  String    // "repair", "accessories", "quote", "support", "other"
  device       String?   // Optional device info
  message      String
  status       String    @default("new") // "new", "responded", "resolved"
  adminNotes   String?
  respondedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime @updatedAt

  @@map("contacts")
}

model RepairService {
  id           String   @id @default(cuid())
  name         String
  description  String?
  basePrice    Float
  estimatedTime Int     // in minutes
  deviceTypes  String  // JSON array of device types ["SMARTPHONE", "TABLET", etc.]
  specificBrand String? // null = all brands, "Apple" = only Apple devices
  specificModel String? // null = all models, "iPhone 15 Pro" = only this model
  priceVariations String? // JSON object for model-specific pricing {"iPhone 15 Pro": 120, "iPhone 14": 100}
  popularity   String? // "Most Popular", "Popular", null
  icon         String?
  isActive     Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("repair_services")
}

model Order {
  id            String   @id @default(cuid())
  stripeId      String   @unique
  amount        Int      // in cents
  currency      String
  status        String   // e.g. 'created', 'paid', 'failed', 'refunded', 'ready', 'shipped', 'finished'
  email         String
  cart          String   // JSON string of cart items
  addressId     String?  @unique
  address       OrderAddress? @relation(fields: [addressId], references: [id])
  userId        String?  // Optional: link to User if registered
  user          User?    @relation(fields: [userId], references: [id])
  repairType    String?  // 'self' or 'by_us' (for parts orders)
  shippingOption String? // 'at_shop', 'send', 'drop' (if repairType is 'by_us')
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("orders")
}

model OrderAddress {
  id         String   @id @default(cuid())
  name       String
  line1      String
  line2      String?
  city       String
  state      String?
  postalCode String
  country    String
  order      Order?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("order_addresses")
}
